package com.labas.store;

import com.labas.store.exception.ServiceException;
import com.labas.store.model.entity.Order;
import com.labas.store.model.entity.OrderStatus;
import com.labas.store.model.entity.User;
import com.labas.store.service.OrderService;
import com.labas.store.service.OrderStatusService;
import com.labas.store.service.UserService;
import com.labas.store.util.ServiceFactory;

import javax.xml.XMLConstants;
import javax.xml.stream.XMLInputFactory;
import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamReader;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.Schema;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Validator;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.util.List;
import java.util.Optional;


public class Main {
    public static void main(String[] args) {
        // Get the service instance for working with orders
        OrderService orderService = ServiceFactory.getOrderService();
        UserService userService = ServiceFactory.getUserService();
        OrderStatusService orderStatusService = ServiceFactory.getOrderStatusService();

        try {
            // 1. Create a new order
            System.out.println("Creating a new order...");
            Order newOrder = new Order();
            newOrder.setDiscount(10.0f);
            newOrder.setTotal(90.0f);
            newOrder.setCreatedAt("2025-01-27 10:00:00");
            newOrder.setUpdatedAt("2025-01-27 10:00:00");

            // Set related entities (OrderStatus and User)
            OrderStatus orderStatus = new OrderStatus(1L, "Pending"); // Example: Order status with ID = 1
            User user = new User(
                    1L,
                    "John",
                    "Doe",
                    "john.doe@example.com",
                    "123456789",
                    "hashedPassword"
            ); // Example: User with ID = 1

            newOrder.setOrderStatus(orderStatus);
            newOrder.setUser(user);

            boolean userSaved = userService.save(user);
            boolean orderStatusSaved = orderStatusService.save(orderStatus);
            boolean orderSaved = orderService.save(newOrder);
            System.out.println("New order saved: " + orderSaved);

            // 2. Retrieve all orders
            System.out.println("\nRetrieving all orders...");
            List<Order> orders = orderService.findAll();
            orders.forEach(order -> System.out.println("Order: " + order));

            // 3. Retrieve an order by ID
            System.out.println("\nRetrieving order with ID = 1...");
            Optional<Order> foundOrder = orderService.findById(1L);
            foundOrder.ifPresent(order -> System.out.println("Found order: " + order));

            // 4. Update an order
            System.out.println("\nUpdating order with ID = 1...");
            foundOrder.ifPresent(order -> {
                order.setDiscount(15.0f); // Change discount
                order.setTotal(85.0f);   // Update total
                try {
                    boolean updated = orderService.update(order);
                    System.out.println("Order update completed: " + updated);
                } catch (ServiceException e) {
                    e.printStackTrace();
                }
            });

            // 5. Delete an order
            System.out.println("\nDeleting order with ID = 1...");
            boolean deleted = orderService.delete(1L);
            System.out.println("Order deletion completed: " + deleted);

        } catch (ServiceException e) {
            System.err.println("An error occurred while working with orders:");
            e.printStackTrace();
        }

        String xmlFilePath = "src/main/resources/onlineStore.xml";
        String xsdFilePath = "src/main/resources/onlineStore.xsd";

        // Validate XML against XSD
        if (validateXML(xmlFilePath, xsdFilePath)) {
            System.out.println("XML is valid according to XSD.");

            // Parse XML using StAX
            parseXMLWithStax(xmlFilePath);
        } else {
            System.out.println("XML validation failed.");
        }

    }

    public static boolean validateXML(String xmlFile, String xsdFile) {
        try {
            SchemaFactory factory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
            Schema schema = factory.newSchema(new File(xsdFile));
            Validator validator = schema.newValidator();
            validator.validate(new StreamSource(new File(xmlFile)));
            return true;
        } catch (Exception e) {
            System.out.println("Validation error: " + e.getMessage());
            return false;
        }
    }

    public static void parseXMLWithStax(String xmlFile) {
        try {
            // Парсинг XML
            while (reader.hasNext()) {
                int event = reader.next();

                switch (event) {
                    case XMLStreamConstants.START_ELEMENT:
                        String elementName = reader.getLocalName();
                        switch (elementName) {
                            case "category":
                                currentCategory = new Category();
                                currentCategory.setCategoryId(Long.parseLong(reader.getAttributeValue(null, "categoryId")));
                                break;
                            case "name":
                                if (currentCategory != null) {
                                    currentCategory.setName(reader.getElementText());
                                } else if (currentProduct != null) {
                                    currentProduct.setName(reader.getElementText());
                                }
                                break;
                            case "parentCategory":
                                if (currentCategory != null) {
                                    currentCategory.setParentCategory(Long.parseLong(reader.getElementText()));
                                }
                                break;
                            case "product":
                                currentProduct = new Product();
                                currentProduct.setProductId(Long.parseLong(reader.getAttributeValue(null, "productId")));
                                break;
                            case "price":
                                if (currentProduct != null) {
                                    currentProduct.setPrice(Double.parseDouble(reader.getElementText()));
                                }
                                break;
                            case "description":
                                if (currentProduct != null) {
                                    currentProduct.setDescription(reader.getElementText());
                                }
                                break;
                            case "order":
                                currentOrder = new Order();
                                currentOrder.setOrderId(Long.parseLong(reader.getAttributeValue(null, "orderId")));
                                currentOrder.setOrderStatusId(Long.parseLong(reader.getAttributeValue(null, "orderStatusId")));
                                currentOrder.setUserId(Long.parseLong(reader.getAttributeValue(null, "userId")));
                                break;
                            case "discount":
                                if (currentOrder != null) {
                                    currentOrder.setDiscount(Float.parseFloat(reader.getElementText()));
                                }
                                break;
                            case "total":
                                if (currentOrder != null) {
                                    currentOrder.setTotal(Float.parseFloat(reader.getElementText()));
                                }
                                break;
                            case "createdAt":
                                if (currentOrder != null) {
                                    currentOrder.setCreatedAt(LocalDateTime.parse(reader.getElementText(), DateTimeFormatter.ISO_DATE_TIME));
                                }
                                break;
                            case "updatedAt":
                                if (currentOrder != null) {
                                    currentOrder.setUpdatedAt(LocalDateTime.parse(reader.getElementText(), DateTimeFormatter.ISO_DATE_TIME));
                                }
                                break;
                            case "productCategory":
                                currentProductCategory = new ProductCategory();
                                currentProductCategory.setCategoryId(Long.parseLong(reader.getAttributeValue(null, "categoryId")));
                                currentProductCategory.setProductId(Long.parseLong(reader.getAttributeValue(null, "productId")));
                                break;
                            case "orderProduct":
                                currentOrderProduct = new OrderProduct();
                                currentOrderProduct.setOrderProductId(Long.parseLong(reader.getAttributeValue(null, "orderProductId")));
                                currentOrderProduct.setOrderId(Long.parseLong(reader.getAttributeValue(null, "orderId")));
                                currentOrderProduct.setProductId(Long.parseLong(reader.getAttributeValue(null, "productId")));
                                break;
                            case "priceAtOrder":
                                if (currentOrderProduct != null) {
                                    currentOrderProduct.setPriceAtOrder(Float.parseFloat(reader.getElementText()));
                                }
                                break;
                            case "quantity":
                                if (currentOrderProduct != null) {
                                    currentOrderProduct.setQuantity(Integer.parseInt(reader.getElementText()));
                                }
                                break;
                        }
                        break;

                    case XMLStreamConstants.END_ELEMENT:
                        String endElementName = reader.getLocalName();
                        switch (endElementName) {
                            case "category":
                                categories.add(currentCategory);
                                currentCategory = null;
                                break;
                            case "product":
                                products.add(currentProduct);
                                currentProduct = null;
                                break;
                            case "order":
                                orders.add(currentOrder);
                                currentOrder = null;
                                break;
                            case "productCategory":
                                productCategories.add(currentProductCategory);
                                currentProductCategory = null;
                                break;
                            case "orderProduct":
                                orderProducts.add(currentOrderProduct);
                                currentOrderProduct = null;
                                break;
                        }
                        break;
                }
            }

            // Вывод объектов
            System.out.println("Categories: " + categories);
            System.out.println("Products: " + products);
            System.out.println("Orders: " + orders);
            System.out.println("Product Categories: " + productCategories);
            System.out.println("Order Products: " + orderProducts);

            // Закрываем ридер
            reader.close();
        } catch (Exception e) {
            System.out.println("Error while parsing XML: " + e.getMessage());
        }
    }
}

